# build.py
import os
import sys
import subprocess
import shutil
import zipfile
from datetime import datetime
from version import Version

def create_release():
    """Cria release da aplica√ß√£o com PyInstaller"""
    
    print("üöÄ Iniciando cria√ß√£o do release...")
    
    # Diret√≥rios
    project_dir = os.path.dirname(os.path.abspath(__file__))
    dist_dir = os.path.join(project_dir, "dist")
    release_dir = os.path.join(project_dir, "releases")
    
    # Limpa diret√≥rios anteriores
    if os.path.exists(dist_dir):
        shutil.rmtree(dist_dir)
    
    if not os.path.exists(release_dir):
        os.makedirs(release_dir)
    
    print("üì¶ Executando PyInstaller...")
    
    # Comando PyInstaller
    pyinstaller_cmd = [
        "pyinstaller",
        "--onefile",
        "--windowed",
        "--name", f"ControleEstoque_v{Version.CURRENT_VERSION}",
        "--add-data", "*.py;.",
        "--icon", "icon.ico",  # Se voc√™ tiver um √≠cone
        "--clean",
        "main.py"
    ]
    
    try:
        result = subprocess.run(pyinstaller_cmd, check=True, capture_output=True, text=True)
        print("‚úÖ PyInstaller executado com sucesso!")
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro no PyInstaller: {e}")
        print(f"Output: {e.output}")
        return False
    
    # Cria arquivo ZIP para distribui√ß√£o
    version = Version.CURRENT_VERSION
    timestamp = datetime.now().strftime("%Y%m%d_%H%M")
    zip_filename = f"ControleEstoque_v{version}_{timestamp}.zip"
    zip_path = os.path.join(release_dir, zip_filename)
    
    print(f"üìÅ Criando arquivo de distribui√ß√£o: {zip_filename}")
    
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # Adiciona execut√°vel
        exe_path = os.path.join(dist_dir, f"ControleEstoque_v{version}.exe")
        if os.path.exists(exe_path):
            zipf.write(exe_path, f"ControleEstoque_v{version}.exe")
        
        # Adiciona README
        readme_content = f"""
Sistema de Controle de Caixas v{version}
========================================

INSTALA√á√ÉO:
1. Extraia este arquivo em uma pasta de sua escolha
2. Execute o arquivo ControleEstoque_v{version}.exe
3. Na primeira execu√ß√£o, configure o invent√°rio inicial

REQUISITOS:
- Windows 7 ou superior
- Nenhuma instala√ß√£o adicional necess√°ria

NOVIDADES DESTA VERS√ÉO:
- Sistema de invent√°rio inicial
- Fluxo visual melhorado
- C√°lculos corrigidos de estoque
- Sistema de atualiza√ß√µes autom√°ticas

SUPORTE:
Em caso de problemas, entre em contato atrav√©s do sistema de atualiza√ß√µes.

Data de Build: {datetime.now().strftime("%d/%m/%Y %H:%M")}
        """
        
        zipf.writestr("README.txt", readme_content)
    
    print(f"‚úÖ Release criado: {zip_path}")
    print(f"üìä Tamanho: {os.path.getsize(zip_path) / 1024 / 1024:.1f} MB")
    
    return True

def create_version_json():
    """Cria arquivo version.json para servidor"""
    version_info = {
        "version": Version.CURRENT_VERSION,
        "release_date": datetime.now().strftime("%d/%m/%Y"),
        "download_url": f"https://github.com/esc4n0rx/HBTrackerx/releases/download/v{Version.CURRENT_VERSION}/ControleEstoque_v{Version.CURRENT_VERSION}.zip",
        "changelog": """
        <b>Vers√£o 0.0.1 - Lan√ßamento Inicial</b><br><br>
        
        <b>üÜï Novidades:</b><br>
        ‚Ä¢ Sistema de invent√°rio inicial<br>
        ‚Ä¢ C√°lculo preciso de estoque por ativo<br>
        ‚Ä¢ Fluxo visual interativo<br>
        ‚Ä¢ Sistema de atualiza√ß√µes autom√°ticas<br>
        ‚Ä¢ Interface melhorada com √≠cones<br><br>
        
        <b>üîß Corre√ß√µes:</b><br>
        ‚Ä¢ Normaliza√ß√£o de nomes de ativos<br>
        ‚Ä¢ Matching inteligente entre invent√°rio e movimentos<br>
        ‚Ä¢ C√°lculos cumulativos corretos<br><br>
        
        <b>‚ö° Melhorias:</b><br>
        ‚Ä¢ Performance otimizada<br>
        ‚Ä¢ Valida√ß√£o de dados aprimorada<br>
        ‚Ä¢ Exporta√ß√£o de relat√≥rios completos
        """,
        "required_version": "0.0.0",
        "file_size": "25.5 MB",
        "checksum": "sha256:abc123..."
    }
    
    import json
    with open("version.json", "w", encoding="utf-8") as f:
        json.dump(version_info, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ Arquivo version.json criado")

if __name__ == "__main__":
    print(f"üî® Criando release para {Version.APP_NAME} v{Version.CURRENT_VERSION}")
    
    if create_release():
        create_version_json()
        print("\nüéâ Release criado com sucesso!")
        print("\nüìã Pr√≥ximos passos:")
        print("1. Teste o execut√°vel na pasta 'dist'")
        print("2. Fa√ßa upload do ZIP para o GitHub Releases")
        print("3. Atualize a URL no version.json")
        print("4. Fa√ßa commit do version.json no reposit√≥rio")
    else:
        print("\n‚ùå Falha na cria√ß√£o do release")