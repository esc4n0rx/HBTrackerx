# main.py - Vers√£o atualizada
import sys
import pandas as pd
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QGridLayout, QLabel, QAction, QFileDialog, 
                             QMessageBox, QGroupBox, QComboBox, QTableView, QHeaderView, QPushButton, QHBoxLayout, 
                             QTabWidget, QFrame, QSplitter, QTextEdit)
from PyQt5.QtGui import QFont, QStandardItemModel, QStandardItem, QIcon
from PyQt5.QtCore import Qt
from database import Database
from settings_dialog import SettingsDialog
from flow_dialog import FlowVisualDialog
import datetime
from version import Version
from update_dialog import UpdateDialog

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.db = Database("estoque.db")
        self.setWindowTitle("Sistema de Controle de Caixas v2.1 - Com Invent√°rio Inicial")
        self.setGeometry(100, 100, 1400, 900)
        
        self.cd_map = {
            'CD RJ': 'CD HORTIFRUTI - Rio de Janeiro (RJ)',
            'CD SP': 'CD HORTIFRUTI - S√£o Paulo (SP)',
            'CD ES': 'CD HORTIFRUTI - Viana (ES)'
        }
        self.asset_types = ['HB 618', 'HB 623']

        self.init_ui()
        self.create_menu()
        self.update_all_views()

    def create_menu(self):
        menu_bar = self.menuBar()
        
        # Menu Arquivo
        file_menu = menu_bar.addMenu("üìÅ Arquivo")
        
        upload_action = QAction("üì§ Novo Upload de Movimentos (.csv/.xlsx)", self)
        upload_action.triggered.connect(self.handle_upload)
        file_menu.addAction(upload_action)
        
        upload_inventory_action = QAction("üì¶ Upload de Invent√°rio Inicial", self)
        upload_inventory_action.triggered.connect(self.quick_upload_inventory)
        file_menu.addAction(upload_inventory_action)
        
        file_menu.addSeparator()
        
        export_all_action = QAction("üíæ Exportar Relat√≥rio Completo", self)
        export_all_action.triggered.connect(self.export_complete_report)
        file_menu.addAction(export_all_action)
        
        file_menu.addSeparator()
        exit_action = QAction("üö™ Sair", self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        # Menu Visualiza√ß√£o
        view_menu = menu_bar.addMenu("üëÅ Visualiza√ß√£o")
        
        refresh_action = QAction("üîÑ Atualizar Dados", self)
        refresh_action.triggered.connect(self.update_all_views)
        view_menu.addAction(refresh_action)

        # Menu Ferramentas
        tools_menu = menu_bar.addMenu("üîß Ferramentas")
        settings_action = QAction("‚öôÔ∏è Configura√ß√µes", self)
        settings_action.triggered.connect(self.open_settings)
        tools_menu.addAction(settings_action)


         # NOVO: Menu de Atualiza√ß√µes
        update_menu = menu_bar.addMenu("üîÑ Atualiza√ß√µes")
        
        check_updates_action = QAction("üîç Verificar Atualiza√ß√µes", self)
        check_updates_action.triggered.connect(self.check_updates_manual)
        update_menu.addAction(check_updates_action)
        
        update_menu.addSeparator()
        
        about_action = QAction("‚ÑπÔ∏è Sobre", self)
        about_action.triggered.connect(self.show_about)
        update_menu.addAction(about_action)
        
        # Verifica√ß√£o autom√°tica na inicializa√ß√£o (opcional)
        #QTimer.singleShot(2000, self.check_updates_auto)

    def check_updates_manual(self):
        """Abre di√°logo de atualiza√ß√µes manualmente"""
        dialog = UpdateDialog(self, auto_check=False)
        dialog.exec_()

    def check_updates_auto(self):
        """Verifica√ß√£o autom√°tica silenciosa"""
        dialog = UpdateDialog(self, auto_check=True)
        dialog.exec_()

    def show_about(self):
        """Mostra informa√ß√µes sobre a aplica√ß√£o"""
        app_info = Version.get_app_info()
        
        about_text = f"""
        <h2>{app_info['name']}</h2>
        <p><b>Vers√£o:</b> {app_info['version']}</p>
        <p><b>Data de Build:</b> {app_info['build_date']}</p>
        <p><b>Descri√ß√£o:</b> {app_info['description']}</p>
        
        <hr>
        
        <p><b>Desenvolvido com:</b></p>
        <ul>
            <li>Python 3.8+</li>
            <li>PyQt5</li>
            <li>SQLite</li>
            <li>Pandas</li>
        </ul>
        
        <p><small>¬© 2025 - Sistema de Controle de Caixas</small></p>
        """
        
        QMessageBox.about(self, f"Sobre {app_info['name']}", about_text)

    def init_ui(self):
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        
        # Layout principal com splitter
        main_layout = QVBoxLayout(main_widget)
        
        # Status bar personalizada
        self.create_status_section(main_layout)
        
        # Splitter principal
        main_splitter = QSplitter(Qt.Vertical)
        
        # Se√ß√£o superior - Estoque
        upper_widget = QWidget()
        self.create_stock_section(upper_widget)
        main_splitter.addWidget(upper_widget)
        
        # Se√ß√£o inferior - An√°lise detalhada
        lower_widget = QWidget()
        self.create_analysis_section(lower_widget)
        main_splitter.addWidget(lower_widget)
        
        # Configura propor√ß√µes do splitter
        main_splitter.setSizes([400, 500])
        main_layout.addWidget(main_splitter)

    def create_status_section(self, parent_layout):
        """Cria se√ß√£o de status do sistema"""
        status_frame = QFrame()
        status_frame.setFrameStyle(QFrame.Box)
        status_frame.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 5px;
                margin: 2px;
            }
        """)
        
        status_layout = QHBoxLayout(status_frame)
        
        # Status do invent√°rio
        self.inventory_status = QLabel("üì¶ Invent√°rio: N√£o carregado")
        self.inventory_status.setStyleSheet("color: #dc3545; font-weight: bold;")
        status_layout.addWidget(self.inventory_status)
        
        status_layout.addStretch()
        
        # Contador de registros
        self.records_count = QLabel("üìä Registros: 0")
        status_layout.addWidget(self.records_count)
        
        # √öltima atualiza√ß√£o
        self.last_update = QLabel("üïê √öltima atualiza√ß√£o: --")
        status_layout.addWidget(self.last_update)
        
        parent_layout.addWidget(status_frame)

    def create_stock_section(self, parent_widget):
        """Cria se√ß√£o de visualiza√ß√£o de estoque"""
        layout = QVBoxLayout(parent_widget)
        
        # T√≠tulo melhorado
        title_layout = QHBoxLayout()
        title_label = QLabel("üìä VIS√ÉO GERAL DO ESTOQUE")
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_layout.addWidget(title_label)
        title_layout.addStretch()
        
        # Bot√£o de atualiza√ß√£o r√°pida
        refresh_btn = QPushButton("üîÑ Atualizar")
        refresh_btn.clicked.connect(self.update_all_views)
        refresh_btn.setStyleSheet("QPushButton { padding: 5px 15px; }")
        title_layout.addWidget(refresh_btn)
        
        layout.addLayout(title_layout)

        # Abas melhoradas
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #c0c0c0;
                border-radius: 5px;
            }
            QTabBar::tab {
                background: #f0f0f0;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
            }
            QTabBar::tab:selected {
                background: #007bff;
                color: white;
            }
        """)
        
        self.stock_widgets = {}
        
        # Cria abas
        self.create_stock_tab("üìä Total")
        for asset in self.asset_types:
            self.create_stock_tab(f"üì¶ {asset}")

        layout.addWidget(self.tabs)

    def create_analysis_section(self, parent_widget):
        """Cria se√ß√£o de an√°lise detalhada"""
        layout = QVBoxLayout(parent_widget)
        
        details_group = QGroupBox("üîç AN√ÅLISE DETALHADA POR LOCAL")
        details_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                font-size: 12px;
                border: 2px solid #007bff;
                border-radius: 5px;
                margin-top: 1ex;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top center;
                padding: 0 5px;
                background-color: white;
            }
        """)
        
        details_layout = QVBoxLayout(details_group)
        
        # Layout de filtro e a√ß√µes melhorado
        filter_action_layout = QHBoxLayout()
        
        filter_action_layout.addWidget(QLabel("üè™ Local:"), 1)
        
        self.location_combo = QComboBox()
        self.location_combo.setStyleSheet("QComboBox { padding: 5px; }")
        self.location_combo.currentIndexChanged.connect(self.update_location_details)
        filter_action_layout.addWidget(self.location_combo, 4)
        
        # Bot√µes de a√ß√£o melhorados
        self.view_flow_button = QPushButton("üìä Fluxo Cl√°ssico")
        self.view_flow_button.setStyleSheet("QPushButton { background-color: #28a745; color: white; padding: 5px 10px; }")
        self.view_flow_button.clicked.connect(self.show_flow_dialog)
        filter_action_layout.addWidget(self.view_flow_button, 2)
        
        self.view_visual_flow_button = QPushButton("üéØ Fluxo Visual")
        self.view_visual_flow_button.setStyleSheet("QPushButton { background-color: #007bff; color: white; padding: 5px 10px; }")
        self.view_visual_flow_button.clicked.connect(self.show_visual_flow_dialog)
        filter_action_layout.addWidget(self.view_visual_flow_button, 2)
        
        self.export_button = QPushButton("üíæ Exportar")
        self.export_button.setStyleSheet("QPushButton { background-color: #6c757d; color: white; padding: 5px 10px; }")
        self.export_button.clicked.connect(self.export_history)
        filter_action_layout.addWidget(self.export_button, 2)
        
        details_layout.addLayout(filter_action_layout)
        
        # Tabela melhorada
        self.history_table = QTableView()
        self.history_table.setAlternatingRowColors(True)
        self.history_table.setEditTriggers(QTableView.NoEditTriggers)
        self.history_table.setStyleSheet("""
            QTableView {
                gridline-color: #d0d0d0;
                selection-background-color: #b3d9ff;
            }
            QTableView::item {
                padding: 4px;
            }
        """)
        
        self.history_model = QStandardItemModel()
        self.history_table.setModel(self.history_model)
        
        details_layout.addWidget(self.history_table)
        layout.addWidget(details_group)

    def create_stock_tab(self, asset_name):
        """Cria aba de estoque com layout melhorado"""
        tab_widget = QWidget()
        layout = QGridLayout(tab_widget)
        layout.setSpacing(10)
        
        widgets = {}
        
        # Cabe√ßalho com estilo
        headers = ["üè¢ Local", "üì¶ Estoque Atual", "üìà Status"]
        for i, header in enumerate(headers):
            header_label = QLabel(f"<b>{header}</b>")
            header_label.setStyleSheet("""
                QLabel {
                    background-color: #f8f9fa;
                    border: 1px solid #dee2e6;
                    padding: 8px;
                    font-size: 12px;
                }
            """)
            layout.addWidget(header_label, 0, i)
        
        # Linhas de CDs
        row = 1
        for cd_key, cd_name in self.cd_map.items():
            # Nome do CD
            cd_label = QLabel(cd_name)
            cd_label.setStyleSheet("padding: 8px; border-bottom: 1px solid #eee;")
            layout.addWidget(cd_label, row, 0)
            
            # Estoque
            stock_label = QLabel("0")
            stock_label.setStyleSheet("padding: 8px; border-bottom: 1px solid #eee; font-weight: bold;")
            widgets[cd_key] = stock_label
            layout.addWidget(stock_label, row, 1)
            
            # Status
            status_label = QLabel("üü¢ OK")
            status_label.setStyleSheet("padding: 8px; border-bottom: 1px solid #eee;")
            widgets[f"{cd_key}_status"] = status_label
            layout.addWidget(status_label, row, 2)
            
            row += 1
            
        # Linha de total das lojas com destaque
        total_frame = QFrame()
        total_frame.setStyleSheet("""
            QFrame {
                background-color: #e8f4fd;
                border: 2px solid #007bff;
                border-radius: 5px;
                margin: 5px;
            }
        """)
        total_layout = QGridLayout(total_frame)
        
        total_layout.addWidget(QLabel("<b>üè™ TOTAL ESTOQUE LOJAS</b>"), 0, 0)
        
        total_stock_label = QLabel("0")
        total_stock_label.setStyleSheet("font-weight: bold; font-size: 14px; color: #007bff;")
        widgets['total_lojas'] = total_stock_label
        total_layout.addWidget(total_stock_label, 0, 1)
        
        total_status_label = QLabel("üìä Calculado")
        widgets['total_lojas_status'] = total_status_label
        total_layout.addWidget(total_status_label, 0, 2)
        
        layout.addWidget(total_frame, row, 0, 1, 3)
        
        self.tabs.addTab(tab_widget, asset_name)
        self.stock_widgets[asset_name] = widgets

    def update_all_views(self):
        """Atualiza√ß√£o melhorada com feedback visual"""
        try:
            # Atualiza status
            self.update_status_info()
            
            # Calcula estoques (agora com invent√°rio)
            stock_data = self.db.calculate_stock_by_asset_with_inventory()
            
            # Atualiza abas
            for asset_tab_name, widgets in self.stock_widgets.items():
                total_lojas_asset = 0
                
                # Atualiza CDs
                for cd_key, cd_full_name in self.cd_map.items():
                    cd_stock = 0
                    if "Total" in asset_tab_name:
                        cd_stock = sum(stock_data.get(cd_full_name, {}).values())
                    else:
                        asset_clean = asset_tab_name.replace("üì¶ ", "")
                        cd_stock = stock_data.get(cd_full_name, {}).get(asset_clean, 0)
                    
                    widgets[cd_key].setText(f"{cd_stock:,}".replace(",", "."))
                    
                    # Atualiza status do CD
                    if cd_stock < 0:
                        widgets[f"{cd_key}_status"].setText("üî¥ Negativo")
                        widgets[f"{cd_key}_status"].setStyleSheet("color: #dc3545;")
                    elif cd_stock == 0:
                        widgets[f"{cd_key}_status"].setText("üü° Zero")
                        widgets[f"{cd_key}_status"].setStyleSheet("color: #ffc107;")
                    else:
                        widgets[f"{cd_key}_status"].setText("üü¢ OK")
                        widgets[f"{cd_key}_status"].setStyleSheet("color: #28a745;")
                
                # Calcula total das lojas
                for location, assets in stock_data.items():
                    if location.startswith("LOJA"):
                        if "Total" in asset_tab_name:
                            total_lojas_asset += sum(assets.values())
                        else:
                            asset_clean = asset_tab_name.replace("üì¶ ", "")
                            total_lojas_asset += assets.get(asset_clean, 0)
               
                widgets['total_lojas'].setText(f"{total_lojas_asset:,}".replace(",", "."))
                
                # Atualiza status do total de lojas
                if total_lojas_asset < 0:
                    widgets['total_lojas_status'].setText("üî¥ Estoque Negativo")
                    widgets['total_lojas_status'].setStyleSheet("color: #dc3545;")
                elif total_lojas_asset == 0:
                    widgets['total_lojas_status'].setText("üü° Sem Estoque")
                    widgets['total_lojas_status'].setStyleSheet("color: #ffc107;")
                else:
                    widgets['total_lojas_status'].setText("üü¢ Estoque Positivo")
                    widgets['total_lojas_status'].setStyleSheet("color: #28a745;")

            # Atualiza combo de locais
            self.update_locations_combo()
            
            # Atualiza detalhes do local
            self.update_location_details()
            
            # Atualiza timestamp
            from datetime import datetime
            self.last_update.setText(f"üïê √öltima atualiza√ß√£o: {datetime.now().strftime('%H:%M:%S')}")
            
        except Exception as e:
            QMessageBox.critical(self, "Erro", f"Erro ao atualizar visualiza√ß√µes:\n{e}")

    def update_status_info(self):
        """Atualiza informa√ß√µes de status do sistema"""
        # Verifica se existe invent√°rio
        inventory_check = self.db._execute_query("SELECT COUNT(*) as count FROM inventario_inicial")
        has_inventory = inventory_check[0]['count'] > 0 if inventory_check else False
        
        if has_inventory:
            self.inventory_status.setText("üì¶ Invent√°rio: ‚úÖ Carregado")
            self.inventory_status.setStyleSheet("color: #28a745; font-weight: bold;")
        else:
            self.inventory_status.setText("üì¶ Invent√°rio: ‚ùå N√£o carregado")
            self.inventory_status.setStyleSheet("color: #dc3545; font-weight: bold;")
        
        # Conta registros de movimentos
        movements_check = self.db._execute_query("SELECT COUNT(*) as count FROM movimentos")
        movements_count = movements_check[0]['count'] if movements_check else 0
        self.records_count.setText(f"üìä Registros: {movements_count:,}".replace(",", "."))

    def update_locations_combo(self):
        """Atualiza combo de locais"""
        self.location_combo.blockSignals(True)
        current_selection = self.location_combo.currentText()
        self.location_combo.clear()
        
        self.location_combo.addItem("üîç Selecione um local...")
        
        # Adiciona CDs
        cds = sorted(self.db.get_all_locations('cd'))
        if cds:
            for cd in cds:
                self.location_combo.addItem(f"üè¢ {cd}")
        
        # Adiciona separador visual
        self.location_combo.insertSeparator(self.location_combo.count())
        
        # Adiciona lojas
        lojas = sorted(self.db.get_all_locations('loja'))
        if lojas:
            for loja in lojas:
                self.location_combo.addItem(f"üè™ {loja}")
        
        # Restaura sele√ß√£o
        for i in range(self.location_combo.count()):
            if current_selection in self.location_combo.itemText(i):
                self.location_combo.setCurrentIndex(i)
                break
        
        self.location_combo.blockSignals(False)

    def update_location_details(self):
        """Atualiza detalhes do local selecionado"""
        self.history_model.clear()
        self.history_model.setHorizontalHeaderLabels([
            'üìÖ Data', 'üîÑ Movimento', 'üì¶ Ativo (RTI)', 
            'üì§ Origem', 'üì• Destino', 'üî¢ Quantidade'
        ])
        
        location_text = self.location_combo.currentText()
        if not location_text or "Selecione" in location_text:
            self.view_flow_button.setEnabled(False)
            self.view_visual_flow_button.setEnabled(False)
            self.export_button.setEnabled(False)
            return

        # Extrai nome real do local (remove emoji e prefixo)
        location_name = location_text.replace("üè¢ ", "").replace("üè™ ", "")
        
        self.view_flow_button.setEnabled(True)
        self.view_visual_flow_button.setEnabled(True)
        self.export_button.setEnabled(True)
        
        # Busca hist√≥rico
        history = self.db.get_location_history(location_name)
        
        for row_data in history:
            items = []
            for i, item in enumerate(row_data):
                if i == 0 and item:  # Data
                    try:
                        from datetime import datetime
                        date_obj = datetime.strptime(str(item), '%Y-%m-%d')
                        formatted_date = date_obj.strftime('%d/%m/%Y')
                        items.append(QStandardItem(formatted_date))
                    except:
                        items.append(QStandardItem(str(item) if item else ""))
                elif i == 1 and item:  # Tipo de movimento
                    movement_icons = {
                        'Remessa': 'üì§',
                        'Regresso': 'üì•', 
                        'Entrega': 'üöö',
                        'Devolu√ß√£o de Entrega': '‚Ü©Ô∏è',
                        'Transferencia': 'üîÑ',
                        'Retorno': 'üîô'
                    }
                    icon = movement_icons.get(item, 'üìã')
                    items.append(QStandardItem(f"{icon} {item}"))
                else:
                    items.append(QStandardItem(str(item) if item is not None else ""))
            
            self.history_model.appendRow(items)
        
        # Configura colunas
        header = self.history_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeToContents)  # Data
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # Movimento
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)  # RTI
        header.setSectionResizeMode(3, QHeaderView.Stretch)           # Origem
        header.setSectionResizeMode(4, QHeaderView.Stretch)           # Destino
        header.setSectionResizeMode(5, QHeaderView.ResizeToContents)  # Quantidade

    def quick_upload_inventory(self):
        """Upload r√°pido de invent√°rio pelo menu"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Selecionar Arquivo de Invent√°rio", "", 
            "Arquivos de Dados (*.csv *.xlsx)"
        )
        
        if file_path:
            settings_dialog = SettingsDialog(self.db, self)
            try:
                # Simula upload usando o m√©todo da settings dialog
                df = pd.read_csv(file_path, sep=';') if file_path.endswith('.csv') else pd.read_excel(file_path)
                
                # Valida√ß√µes
                required_columns = ['loja_nome', 'ativo', 'quantidade']
                if not all(col in df.columns for col in required_columns):
                    raise ValueError(f"O arquivo deve conter as colunas: {', '.join(required_columns)}")
                
                self.db.insert_inventory_data(df)
                QMessageBox.information(
                    self, "Sucesso", 
                    f"Invent√°rio inicial carregado!\n{len(df)} registros processados."
                )
                self.update_all_views()
                
            except Exception as e:
                QMessageBox.critical(self, "Erro", f"Erro no upload:\n{e}")

    def handle_upload(self):
        """Upload de movimentos com verifica√ß√£o de invent√°rio"""
        # Verifica se h√° invent√°rio carregado
        inventory_check = self.db._execute_query("SELECT COUNT(*) as count FROM inventario_inicial")
        has_inventory = inventory_check[0]['count'] > 0 if inventory_check else False
        
        if not has_inventory:
            reply = QMessageBox.question(
                self, "Invent√°rio N√£o Encontrado",
                "N√£o foi encontrado invent√°rio inicial carregado.\n\n"
                "√â recomendado carregar o invent√°rio inicial antes dos movimentos.\n"
                "Deseja continuar mesmo assim?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            if reply == QMessageBox.No:
                return
        
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Selecionar Arquivo de Movimentos", "", 
            "Arquivos de Dados (*.csv *.xlsx)"
        )
        
        if file_path:
            try:
                df = pd.read_csv(file_path, sep=';') if file_path.endswith('.csv') else pd.read_excel(file_path)
                
                if 'Data' not in df.columns or 'Quant.' not in df.columns or 'RTI' not in df.columns:
                    raise ValueError("O arquivo deve conter as colunas 'Data', 'Quant.' e 'RTI'.")
                
                self.db.insert_data(df)
                QMessageBox.information(self, "Sucesso", f"{len(df)} registros de movimento importados.")
                self.update_all_views()
                
            except Exception as e:
                QMessageBox.critical(self, "Erro no Upload", f"Falha ao processar arquivo:\n{e}")

    def show_visual_flow_dialog(self):
        """Mostra o novo di√°logo de fluxo visual"""
        location_text = self.location_combo.currentText()
        if location_text and "Selecione" not in location_text:
            location_name = location_text.replace("üè¢ ", "").replace("üè™ ", "")
            
            # Verifica se √© loja (fluxo visual s√≥ funciona para lojas com invent√°rio)
            if not location_name.startswith('LOJA'):
                QMessageBox.information(
                    self, "Informa√ß√£o", 
                    "O fluxo visual est√° dispon√≠vel apenas para lojas com invent√°rio inicial."
                )
                return
            
            dialog = FlowVisualDialog(location_name, self.db, self)
            dialog.exec_()

    def show_flow_dialog(self):
        """Mostra di√°logo de fluxo cl√°ssico"""
        location_text = self.location_combo.currentText()
        if location_text and "Selecione" not in location_text:
            location_name = location_text.replace("üè¢ ", "").replace("üè™ ", "")
            flow_data = self.db.get_flow_data(location_name)
            dialog = FlowDialog(location_name, flow_data, self)
            dialog.exec_()

    def export_complete_report(self):
        """Exporta relat√≥rio completo do sistema"""
        try:
            file_path, _ = QFileDialog.getSaveFileName(
                self, "Salvar Relat√≥rio Completo", 
                f"relatorio_completo_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx", 
                "Excel (*.xlsx)"
            )
            
            if file_path:
                with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                    # Estoque atual
                    stock_data = self.db.calculate_stock_by_asset_with_inventory()
                    stock_list = []
                    for location, assets in stock_data.items():
                        for asset, qty in assets.items():
                            stock_list.append({
                                'Local': location,
                                'Ativo': asset,
                                'Quantidade': qty,
                                'Tipo': 'CD' if 'CD' in location else 'Loja'
                            })
                    
                    if stock_list:
                        stock_df = pd.DataFrame(stock_list)
                        stock_df.to_excel(writer, sheet_name='Estoque Atual', index=False)
                    
                    # Movimentos
                    movements_query = """
                    SELECT data_movimento, tipo_movimento, local_origem, local_destino, 
                            rti, quantidade, guia, nota_fiscal
                    FROM movimentos ORDER BY data_movimento DESC
                    """
                    movements = self.db._execute_query(movements_query)
                    if movements:
                        movements_df = pd.DataFrame([dict(row) for row in movements])
                        movements_df.to_excel(writer, sheet_name='Movimentos', index=False)
                    
                    # Invent√°rio inicial
                    inventory_query = """
                    SELECT loja_nome, ativo, quantidade, data_inventario
                    FROM inventario_inicial ORDER BY loja_nome
                    """
                    inventory = self.db._execute_query(inventory_query)
                    if inventory:
                        inventory_df = pd.DataFrame([dict(row) for row in inventory])
                        inventory_df.to_excel(writer, sheet_name='Inventario Inicial', index=False)
                
                QMessageBox.information(self, "Sucesso", f"Relat√≥rio completo exportado para:\n{file_path}")
                
        except Exception as e:
            QMessageBox.critical(self, "Erro", f"Erro ao exportar relat√≥rio:\n{e}")

    def export_history(self):
        """Exporta hist√≥rico do local selecionado"""
        location_text = self.location_combo.currentText()
        if not location_text or self.history_model.rowCount() == 0:
            QMessageBox.warning(self, "Aviso", "N√£o h√° dados para exportar.")
            return

        location_name = location_text.replace("üè¢ ", "").replace("üè™ ", "")
        
        file_path, _ = QFileDialog.getSaveFileName(
            self, "Salvar Hist√≥rico", 
            f"historico_{location_name.replace(' ', '_')}.csv", 
            "CSV (*.csv)"
        )
        
        if file_path:
            try:
                data = []
                headers = [self.history_model.horizontalHeaderItem(i).text() 
                            for i in range(self.history_model.columnCount())]
                
                for row in range(self.history_model.rowCount()):
                    row_data = [self.history_model.item(row, col).text() 
                                for col in range(self.history_model.columnCount())]
                    data.append(row_data)
                
                df = pd.DataFrame(data, columns=headers)
                df.to_csv(file_path, index=False, sep=';', encoding='utf-8-sig')
                QMessageBox.information(self, "Sucesso", f"Hist√≥rico exportado para:\n{file_path}")
                
            except Exception as e:
                QMessageBox.critical(self, "Erro", f"Erro ao exportar:\n{e}")

    def open_settings(self):
        """Abre di√°logo de configura√ß√µes"""
        dialog = SettingsDialog(self.db, self)
        dialog.database_cleared.connect(self.update_all_views)
        dialog.exec_()

    def closeEvent(self, event):
        """Evento de fechamento da aplica√ß√£o"""
        reply = QMessageBox.question(
            self, "Confirmar Sa√≠da",
            "Deseja realmente sair do sistema?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.db.close()
            event.accept()
        else:
            event.ignore()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    
    # Configura√ß√£o do estilo da aplica√ß√£o
    app.setStyle('Fusion')
    
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())